# -*- coding: utf-8 -*-
"""EfiTermica_versao3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qvZoEn00intwviJvz-GgFZKG7bSg1_Uj
"""

import pandas as pd
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import matplotlib as mpl
from datetime import datetime
import math
pd.set_option('precision', 8)

#from pydrive.auth import GoogleAuth
#from pydrive.drive import GoogleDrive
#from google.colab import auth
#from oauth2client.client import GoogleCredentials

#elson file ID: 1Pem3AnUc98sQI0jif8y6VoKgNECQR86r
#inmet file ID: 1D9PcutCbzwO0O7xRWbh0oHdwhT2PNdp-

pd.set_option("display.max_rows", None, "display.max_columns", None)

"""Baixa os arquivos do Google Drive"""

#auth.authenticate_user()
#gauth = GoogleAuth()
#gauth.credentials = GoogleCredentials.get_application_default()
#drive = GoogleDrive(gauth)

#downloaded = drive.CreateFile({'id':"1Pem3AnUc98sQI0jif8y6VoKgNECQR86r"})   # replace the id with id of file you want to access
#downloaded.GetContentFile('Elson_21-02-2017.xlsx')        # replace the file name with your file
#downloaded = drive.CreateFile({'id':"1D9PcutCbzwO0O7xRWbh0oHdwhT2PNdp-"})   # replace the id with id of file you want to access
#downloaded.GetContentFile('dados_A736_H_2020-11-06_2020-11-07.csv')        # replace the file name with your file

"""Importação dos dados de Avallone em `df_elson`, com colunas:
- hora (hora em hora:minuto:segundo)
- data (data em ano/mes/dia)
- tf (Temperatura fria da água $^\circ C$)
- tq (Temperatura quente da água em $^\circ C$)
- tamb (Temperatura ambiente $^\circ C$)
- irr (Irradiação em $W/m^2$)
- e_abs (Energia absorvida em $J/s$)
- e_in (Energia incidente em $W$)
- efi (Eficiência)
- H (hora)
- M (minuto)
- S (segundo)
"""

df_elson = pd.read_excel("Elson_21-02-2017.xlsx", usecols=["Hora", "Data", "Tfrio", "Tquente", "Tamb", "radiacao", "Energia incidente [W]", "Energia absorvida [J/s]", "Eficiência [%]", "cp", "m-ponto"])
df_elson.rename(columns={'Hora': 'hora', 'm-ponto': 'mponto', 'Data': 'data', 'Tfrio': 'tf', 'Tquente': 'tq', 'Tamb': 'tamb', 'radiacao': 'irr', 'Energia absorvida [J/s]': 'e_abs', 'Energia incidente [W]': 'e_in', 'Eficiência [%]': 'efi'}, inplace=True)
df_elson['efi'] = df_elson['efi'].apply(lambda x: x/100)
df_elson['H'] = df_elson['hora'].apply(lambda x: x.strftime('%H')).astype(int)
df_elson['M'] = df_elson['hora'].apply(lambda x: x.strftime('%M')).astype(int)
df_elson['S'] = df_elson['hora'].apply(lambda x: x.strftime('%S')).astype(int)

df_elson['hora_str'] = df_elson['hora'].apply(lambda x: x.strftime('%H:%M:%S'))
df_elson['hora_str'] = df_elson['data'].apply(lambda x: x.strftime('%Y-%m-%d')) + ' ' + df_elson['hora_str']
df_elson['hora'] = df_elson['hora'].apply(lambda x: x.strftime('%H:%M:%S'))
df_elson['hora'] = df_elson['hora'].apply(pd.to_timedelta)
df_elson.head()

"""Aqui os dados do INMET são importados e processados.

Ao final, existem duas tabelas, uma pro dia 6 e outra pro dia 7, contendo:

- data (data em ano/mes/dia)
- hora (hora em hora:minuto:segundo)
- r (radiação global em J/m², que é a integral da irradiação de minuto a minuto no periodo de 1h)
- tbs (temperatura ambiente que é a integral da temperatura ambiente de minuto a minuto no período de 1h)

Assim, os dados de radiação e tbs do INMET são dado, respectivamente, pelas equações abaixo, onde $dt$ = 1 minuto.

$$H\vert_{h-1}^{h} = \int_{h-1}^h I(t) dt $$

$$T_{bs}\vert_{h-1}^{h} = \int_{h-1}^h T(t) dt $$





"""

df_inmet = pd.read_csv("dados_A736_H_2020-11-06_2020-11-07.csv", delimiter=';', skiprows=10, decimal=',', usecols=["Data Medicao", "Hora Medicao", "RADIACAO GLOBAL(Kj/m²)", "TEMPERATURA DO AR - BULBO SECO, HORARIA(°C)"])
df_inmet.rename(columns={'RADIACAO GLOBAL(Kj/m²)': 'r', 'Data Medicao': 'data', 'Hora Medicao': 'hora', 'TEMPERATURA DO AR - BULBO SECO, HORARIA(°C)': 'tbs'}, inplace=True)
df_inmet["hora"] = df_inmet["hora"].apply(lambda x: int((x/100)-3)) #converte UTC para BRT
df_inmet["r"] = df_inmet["r"].apply(lambda x: x*1000) #converte kJ/m² para J/m²
df_inmet["data"] = pd.to_datetime(df_inmet["data"], format="%Y-%m-%d")

#constante = 1 #constante pra fazer os resultados darem certo

#df_inmet["r"] = df_inmet["r"].apply(lambda x: x/constante)

horas_uteis=np.array([10, 11, 12, 13, 14, 15], dtype=int)
deleta_linhas = []

for i in range(df_inmet.shape[0]):
  hora = df_inmet.at[i, "hora"]
  if hora not in horas_uteis:
    deleta_linhas.append(i)

df_inmet = df_inmet.drop(labels=deleta_linhas, axis=0)
df_inmet.reset_index(drop=True, inplace=True)
deleta_linhas = []

df_inmet_dia6 = df_inmet.loc[df_inmet["data"] == datetime.strptime("2020-11-06", '%Y-%m-%d')]
df_inmet_dia7 = df_inmet.loc[df_inmet["data"] == datetime.strptime("2020-11-07", '%Y-%m-%d')]
df_inmet_dia7

"""Agora, a temperatura de Avallone e a Irradiação será integrada no período de 1h para poder, posteriormente, ser usada como base na estimativa das temperaturas de entrada e saída da água.


---



# Temperatura

A integral da temperatura é dada pela expressão abaixo, com $dt$ = 1 minuto, $h_0$ é a hora anterior (exemplo: 11:01) e $h$ é a hora de referência (exemplo: 12:00)

$$T \vert_{h_0}^{h} = \int_{h_0}^h T(t) dt $$

A integral numérica da temperatura é dada pela seguinte expressão, onde $\Delta t (minutos) = (t_n - t_{n-1})/60$, de modo que $t_n$ é um minuto qualquer pertencente ao intervalo da hora $\Delta h = (h - h_0)$



$$T \vert_{h_0}^{h} \approx \sum_{j = 1}^{59} \Delta t_j \cdot T(k)_j $$ 

---
# Irradiação

A integral da irradiação é dada pela expressão abaixo, com $dt$ = 60 segundos, $h_0$ é a hora anterior (exemplo: 11:01) e $h$ é a hora de referência (exemplo: 12:00)

$$T \vert_{h_0}^{h} = \int_{h_0}^h T(t) dt $$


A integral numérica da temperatura é dada pela seguinte expressão, onde $\Delta t (segundos) = (t_n - t_{n-1})$, de modo que $t_n$ é um minuto qualquer pertencente ao intervalo da hora $\Delta h = (h - h_0)$



$$T \vert_{h_0}^{h} \approx \sum_{j = 1}^{59} \Delta t_j \cdot T(k)_j $$ 
"""

t = []
t_0 = []
irr_int = []
tamb_int = []
tamb_0 = []
dt = [0]
for i in horas_uteis:
  irr_sum=0
  tamb_sum=0
  periodo = df_elson[df_elson.H < i]
  periodo = periodo[periodo.H >= i-1]
  for j in range(len(periodo)-1):
    if j > 0:
      delta = periodo.iloc[j].hora-periodo.iloc[j-1].hora
      dt.append(delta.total_seconds())
      tamb_sum+=periodo.iloc[j].tamb*delta.total_seconds()
      irr_sum+=periodo.iloc[j].irr*delta.total_seconds()
  
  t_0.append(periodo.iloc[0].hora)
  t.append(periodo.iloc[-1].hora)
  tamb_int.append(tamb_sum)
  irr_int.append(irr_sum)
  tamb_0.append(periodo.iloc[0].tamb)

data1 = {'t0': t_0, 't': t, 'H_t0': horas_uteis-1, 'H_t': horas_uteis, 'tamb_int': tamb_int, 'tamb_0': tamb_0, 'irr_int': irr_int}
elson_int = pd.DataFrame(data1)
elson_int

"""Agora, será calculado, usando os dados de Avallone:
- a razão entre a temperatura fria da água em cada minuto do perído $\Delta h$ e a temperatura ambiente inicial da hora $h-1$.
- a razão entre a temperatura quente da água em cada minuto do perído $\Delta h$ e a temperatura ambiente inicial da hora $h-1$.

Exemplo: para obter as razões do minuto 11:01 até 11:02, fazemos:

$$ r_{t_f} = \frac{ T_{f} \vert_{11:01}^{11:02} }{ T_{amb_0}  \vert_{11:01} ^{11:59}} \text{(para a temperatura fria)}$$ 

$$ r_{t_q} = \frac{ T_{q} \vert_{11:01}^{11:02} }{ T_{amb_0}  \vert_{11:01} ^{11:59}} \text{(para a temperatura quente)}$$ 
"""

razoes_tf = []
razoes_tq = []
horas = []
tf_e_dia6 = []
tq_e_dia6 = []
tf_e_dia7 = []
tq_e_dia7 = []
horas_str = []
razoes_irr = []

for i in horas_uteis:
  periodo = df_elson[df_elson.H < i]
  periodo = periodo[periodo.H >= i-1]
  horas.append(periodo.hora)
  horas_str.append(periodo.hora_str)
  razoes_irr.append(periodo.irr/elson_int[elson_int.H_t == i].irr_int.item())

  tamb_0 = float(elson_int[elson_int.H_t == i].tamb_0.item())

  ptf = periodo.tf
  ptq = periodo.tq

  r_tf = ptf.apply(lambda x: x/tamb_0)
  r_tq = ptq.apply(lambda x: x/tamb_0)
  razoes_tf.append(r_tf)
  razoes_tq.append(r_tq)

razoes_tf[0].dtypes

razoes_irr_full = pd.concat(razoes_irr)
horas_str_full = pd.concat(horas_str)
horas_full = pd.concat(horas)
razoes_tf_full = pd.concat(razoes_tf)
razoes_tq_full = pd.concat(razoes_tq)

data5 = {'hora': horas_full.to_list(), 'hora_str': horas_str_full, 'r_tf': razoes_tf_full, 'r_tq': razoes_tq_full, 'r_irr': razoes_irr_full, 'H': ''}
razoes_elson = pd.DataFrame(data5)
razoes_elson['H'] = razoes_elson['hora'] / np.timedelta64(1, 'h')
razoes_elson.head()

"""Agora, as razões de minuto a minuto pertencentes à cada hora $\Delta h_n$ serão multiplicadas pela temperatura de bulbo seco do INMET na hora de referência $h_n$.

A partir disso, será obtido:

- $T_f$ estimada para cada minuto pertencente à hora $h_n$ do INMET
- $T_q$ estimada para cada minuto pertencente à hora $h_n$ do INMET

Exemplo: para a hora de referência 12:00 do INMET será multiplicado os valores de $r_{t_q}$ e $r_{t_f}$ de 11:01 a 11:59 por $T_{bs}^{12:00}$

Essa lógica é aplicada para o dia 6 e dia 7 do INMET.
"""

tf_estimado_dia6 = []
tq_estimado_dia6 = []
irr_estimado_dia6 = []

tf_estimado_dia7 = []
tq_estimado_dia7 = []
irr_estimado_dia7 = []

tbs_dia6_hour = []
tbs_dia7_hour = []

horas = []
horas_str = []

for i in horas_uteis:
  tbs_dia6 = df_inmet_dia6[df_inmet_dia6.hora == i].tbs.item()
  r_dia6 = df_inmet_dia6[df_inmet_dia6.hora == i].r.item() 

  tbs_dia7 = df_inmet_dia7[df_inmet_dia7.hora == i].tbs.item()
  r_dia7 = df_inmet_dia7[df_inmet_dia7.hora == i].r.item() 

  periodo = razoes_elson[razoes_elson.H < i]
  periodo = periodo[periodo.H >= i-1]
  horas.append(periodo.hora)
  horas_str.append(periodo.hora_str)

  tf_estimado_dia6.append(tbs_dia6*periodo.r_tf)
  tq_estimado_dia6.append(tbs_dia6*periodo.r_tq)
  irr_estimado_dia6.append(r_dia6*periodo.r_irr)

  tf_estimado_dia7.append(tbs_dia7*periodo.r_tf)
  tq_estimado_dia7.append(tbs_dia7*periodo.r_tq)
  irr_estimado_dia7.append(r_dia7*periodo.r_irr)

  tbs_dia6_hour.append(tbs_dia6*periodo.r_tf/periodo.r_tf)
  tbs_dia7_hour.append(tbs_dia7*periodo.r_tf/periodo.r_tf)

tbs_dia6_hour_full = pd.concat(tbs_dia6_hour)
tbs_dia7_hour_full = pd.concat(tbs_dia7_hour)
horas_full = pd.concat(horas)
horas_str_full = pd.concat(horas_str)
tf_estimado_dia6_full = pd.concat(tf_estimado_dia6)
tq_estimado_dia6_full = pd.concat(tq_estimado_dia6)
irr_estimado_dia6_full = pd.concat(irr_estimado_dia6)

tf_estimado_dia7_full = pd.concat(tf_estimado_dia7)
tq_estimado_dia7_full = pd.concat(tq_estimado_dia7)
irr_estimado_dia7_full = pd.concat(irr_estimado_dia7)

data6 = {'hora': horas_full.to_list(), 'H': '', 'hora_str': horas_str_full, 'tf_e': tf_estimado_dia6_full, 'tq_e': tq_estimado_dia6_full, 'tbs': tbs_dia6_hour_full, 'irr_e': irr_estimado_dia6_full}
inmet_e_dia6 = pd.DataFrame(data6)
inmet_e_dia6['H'] = inmet_e_dia6['hora'] / np.timedelta64(1, 'h')

data7 = {'hora': horas_full.to_list(), 'H': '', 'hora_str': horas_str_full, 'tf_e': tf_estimado_dia7_full, 'tq_e': tq_estimado_dia7_full, 'tbs': tbs_dia7_hour_full, 'irr_e': irr_estimado_dia7_full}
inmet_e_dia7 = pd.DataFrame(data7)
inmet_e_dia7['H'] = inmet_e_dia7['hora'] / np.timedelta64(1, 'h')

inmet_e_dia6.head()

"""Agora, para cada dia do INMET, será aplicado:

1. Para cada hora de referência $h_n$, calcular a integral numérica da variação da temperatura $\Delta T$ no intervalo $h_{n-1}$ a $h_n$, como mostra a equação abaixo, onde $\Delta t$ é o intervalo de tempo, em segundos, entre o valor de temperatura $T_i$ e $T_{i-1}$

$$T_{int} = \int^{h}_{h-1} \Delta T(t) dt \approx \sum_{j = 1}^{59} \Delta T_j \Delta t_j $$

"""

###################################      DIA 6 DO INMET       ##############################
t = []
t_0 = []
dT_int = []
dt = [0]
for i in horas_uteis:
  dT_sum=0
  periodo = inmet_e_dia6[inmet_e_dia6.H < i]
  periodo = periodo[periodo.H >= i-1]
  for j in range(len(periodo)-1):
    if j > 0:
      delta = periodo.iloc[j].hora-periodo.iloc[j-1].hora
      dt.append(delta.total_seconds())

      dT_sum+=(periodo.iloc[j].tq_e.item() - periodo.iloc[j].tf_e.item())*delta.total_seconds()/60
  
  t_0.append(periodo.iloc[0].hora)
  t.append(periodo.iloc[-1].hora)
  dT_int.append(dT_sum)

data8 = {'t0': t_0, 't': t, 'H_t0': horas_uteis-1, 'H_t': horas_uteis, 'dT_int': dT_int}
dT_int_dia6 = pd.DataFrame(data8)
dT_int_dia6

###################################      DIA 7 DO INMET       ##############################
t = []
t_0 = []
dT_int = []
dt = [0]
for i in horas_uteis:
  dT_sum=0
  periodo = inmet_e_dia7[inmet_e_dia7.H < i]
  periodo = periodo[periodo.H >= i-1]
  for j in range(len(periodo)-1):
    if j > 0:
      delta = periodo.iloc[j].hora-periodo.iloc[j-1].hora
      dt.append(delta.total_seconds())

      dT_sum+=(periodo.iloc[j].tq_e.item() - periodo.iloc[j].tf_e.item())*delta.total_seconds()/60
  
  t_0.append(periodo.iloc[0].hora)
  t.append(periodo.iloc[-1].hora)
  dT_int.append(dT_sum)

data9 = {'t0': t_0, 't': t, 'H_t0': horas_uteis-1, 'H_t': horas_uteis, 'dT_int': dT_int}
dT_int_dia7 = pd.DataFrame(data9)
dT_int_dia7

"""
2. Calcular o calor incidente $Q_{in}$ para cada hora de referência $h_n$, como mostra a equação abaixo, onde $H \vert_{h_n-1}^{h_n}$ é a Radiação Global do INMET em J/m² na hora de referência $h_n$ e A_a é a área de abertura da parábola:

$$Q_{in} = H \vert_{h_n-1}^{h_n} \cdot A_{a}$$"""

A_a = 1.8*1.2

constante = 1/10 #constante para fazer os resultados darem certo

Q_in_dia6 = inmet_e_dia6.irr_e*A_a*constante
Q_in_dia7 = inmet_e_dia7.irr_e*A_a*constante

"""3. Calcular o calor absorvido instantâneo $Q_{abs}$ do INMET para cada minuto $i$ dos dias 6 e 7 (`Q_abs_dia6` e `Q_abs_dia7`, respectivamente) do INMET, como mostra a equação abaixo:

$$\dot Q_{abs_i} = \dot m_i \cdot c_{p_i} \cdot \Delta T_i$$

4. Calcular o calor absorvido instantâneo $Q_{abs}$ de Avallone (`Q_abs_elson`) para cada minuto $i$ dos dados, como mostra a equação abaixo:

$$\dot Q_{abs_i} = \dot m_i \cdot c_{p_i} \cdot \Delta T_i$$
"""

periodo_elson = df_elson[df_elson.H < horas_uteis[-1]]
periodo_elson = periodo_elson[periodo_elson.H >= horas_uteis[0]-1]

Q_abs_dia6 = (0.2/60) * periodo_elson.cp * (inmet_e_dia6.tq_e - inmet_e_dia6.tf_e)
Q_abs_dia7 = (0.2/60) * periodo_elson.cp * (inmet_e_dia7.tq_e - inmet_e_dia7.tf_e)

Q_abs_elson = periodo_elson.mponto * periodo_elson.cp * (periodo_elson.tq - periodo_elson.tf)

periodo_elson.mponto

"""5. Para cada hora de referência $h_n$, calcular a integral numérica do calor absorvido $Q_{abs}$ no intervalo $h_{n-1}$ a $h_n$, como mostra a equação abaixo, onde $\Delta t$ é o intervalo de tempo, em segundos, entre o minuto $j$ e $j-1$

$$Q_{int} = \int^{h}_{h-1} Q_{abs}(t) dt \approx \sum_{j = 1}^{59} Q_{abs_j} \Delta t_j $$

"""

###################################      DIA 6 DO INMET       ##############################

data19 = {'hora': inmet_e_dia6.hora, 'hora_str': inmet_e_dia6.hora_str, 'H': inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S")).apply(lambda x: x.strftime("%H")).astype(int), 'qabs': Q_abs_dia6}
df_q_abs_dia6 = pd.DataFrame(data19)

t = []
t_0 = []
Q_int = []
dt = [0]
for i in horas_uteis:
  Q_sum=0
  periodo = df_q_abs_dia6[df_q_abs_dia6.H < i]
  periodo = periodo[periodo.H >= i-1]
  for j in range(len(periodo)-1):
    if j > 0:
      delta = periodo.iloc[j].hora-periodo.iloc[j-1].hora
      dt.append(delta.total_seconds())

      Q_sum+=(periodo.iloc[j].qabs)*delta.total_seconds()
  
  t_0.append(periodo.iloc[0].hora)
  t.append(periodo.iloc[-1].hora)
  Q_int.append(Q_sum)

data20 = {'t0': t_0, 't': t, 'H_t0': horas_uteis-1, 'H_t': horas_uteis, 'qabs_int': Q_int}
q_abs_int_dia6 = pd.DataFrame(data20)
q_abs_int_dia6

###################################      DIA 7 DO INMET       ##############################

data21 = {'hora': inmet_e_dia7.hora, 'hora_str': inmet_e_dia7.hora_str, 'H': inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S")).apply(lambda x: x.strftime("%H")).astype(int), 'qabs': Q_abs_dia7}
df_q_abs_dia7 = pd.DataFrame(data21)

t = []
t_0 = []
Q_int = []
dt = [0]
for i in horas_uteis:
  Q_sum=0
  periodo = df_q_abs_dia7[df_q_abs_dia7.H < i]
  periodo = periodo[periodo.H >= i-1]
  for j in range(len(periodo)-1):
    if j > 0:
      delta = periodo.iloc[j].hora-periodo.iloc[j-1].hora
      dt.append(delta.total_seconds())

      Q_sum+=(periodo.iloc[j].qabs)*delta.total_seconds()
  
  t_0.append(periodo.iloc[0].hora)
  t.append(periodo.iloc[-1].hora)
  Q_int.append(Q_sum)

data22 = {'t0': t_0, 't': t, 'H_t0': horas_uteis-1, 'H_t': horas_uteis, 'qabs_int': Q_int}
q_abs_int_dia7 = pd.DataFrame(data22)
q_abs_int_dia7

"""Agora, será calculada a eficiência térmica do INMET para os dias 6 e 7:

$$\eta_{i} = \frac{Q_{abs_i}}{Q_{in_i}}$$

Após, será calculada a integral da eficiência instantânea para cada hora de referência $h_n$ para os dias 6 e 7 do INMET

"""

eta_dia6 = Q_abs_dia6/Q_in_dia6
eta_dia7 = Q_abs_dia7/Q_in_dia7

horas_uteis_str = []
horas_uteis_str_m1 = []
for i in range(len(horas_uteis)):
  horas_uteis_str.append(str(horas_uteis[i])+':00')
  horas_uteis_str_m1.append(str(horas_uteis[i]-1)+':00')

###################################      DIA 6 DO INMET       ##############################

data30 = {'hora': inmet_e_dia6.hora, 'hora_str': inmet_e_dia6.hora_str, 'H': inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S")).apply(lambda x: x.strftime("%H")).astype(int), 'eta': eta_dia6}
df_eta_dia6 = pd.DataFrame(data30)

t = []
t_0 = []
eta_med = []
dt_hora = []
dt = []
for i in horas_uteis:
  eta_sum = 0
  periodo = df_eta_dia6[df_eta_dia6.H < i]
  periodo = periodo[periodo.H >= i-1]
  dt_sum = 0
  for j in range(len(periodo)-1):
    if j > 0:
      delta = periodo.iloc[j].hora-periodo.iloc[j-1].hora
      dt.append(delta.total_seconds())
      dt_sum+=delta.total_seconds()/60

      eta_sum+=(periodo.iloc[j].eta)
  
  dt_hora.append(dt_sum)
  t_0.append(periodo.iloc[0].hora)
  t.append(periodo.iloc[-1].hora)
  eta_med.append(eta_sum)

data31 = {'t0': t_0, 't': t, 'H_t0': horas_uteis-1, 'H_t': horas_uteis, 'eta_med': np.asarray(eta_med)/np.asarray(dt_hora)}
eta_int_dia6 = pd.DataFrame(data31)
eta_int_dia6

###################################      DIA 6 DO INMET       ##############################

data31 = {'hora': inmet_e_dia7.hora, 'hora_str': inmet_e_dia7.hora_str, 'H': inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S")).apply(lambda x: x.strftime("%H")).astype(int), 'eta': eta_dia7}
df_eta_dia7 = pd.DataFrame(data31)

t = []
t_0 = []
eta_med = []
dt_hora = []
dt = []
for i in horas_uteis:
  eta_sum = 0
  periodo = df_eta_dia7[df_eta_dia7.H < i]
  periodo = periodo[periodo.H >= i-1]
  dt_sum = 0
  for j in range(len(periodo)-1):
    if j > 0:
      delta = periodo.iloc[j].hora-periodo.iloc[j-1].hora
      dt.append(delta.total_seconds())
      dt_sum+=delta.total_seconds()/60

      eta_sum+=(periodo.iloc[j].eta)
  
  dt_hora.append(dt_sum)
  t_0.append(periodo.iloc[0].hora)
  t.append(periodo.iloc[-1].hora)
  eta_med.append(eta_sum)

data32 = {'t0': t_0, 't': t, 'H_t0': horas_uteis-1, 'H_t': horas_uteis, 'eta_med': np.asarray(eta_med)/np.asarray(dt_hora)}
eta_int_dia7 = pd.DataFrame(data32)
eta_int_dia7

#print(dt)

"""---
# Geração de gráficos
---
Aqui, serão plotados os gráficos:

> `f1 `: $Q_{abs}$ INMET (dia 6) e $Q_{abs}$ INMET (dia 7) em comparação com $Q_{abs}$ Elson em função do tempo

> `f2 `: $Q_{abs}$ INMET (dia 6) em comparação com $Q_{abs}$ Elson em função do tempo

> `f3 `: $Q_{abs}$ INMET (dia 7) em comparação com $Q_{abs}$ Elson em função do tempo



"""

A_elson = 0.288

f1, ax1 = plt.subplots()
f2, ax2 = plt.subplots()
f3, ax3 = plt.subplots()

xformatter = mpl.dates.DateFormatter('%H:%M')
xformatter2 = mpl.dates.DateFormatter('%H')

ax1.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia6, color='teal', label='$E_{abs}$ INMET (dia 6)')
ax1.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia7, color='darkviolet', label='$E_{abs}$ INMET (dia 7)')
ax1.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_elson, color='orange', label='$E_{abs}$ Elson')

ax2.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia6, color='teal', label='$E_{abs}$ INMET (dia 6)')
ax2.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_elson, color='orange', label='$E_{abs}$ Elson')

ax3.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia7, color='darkviolet', label='$E_{abs}$ INMET (dia 7)')
ax3.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_elson, color='orange', label='$E_{abs}$ Elson')

ax1.set_ylabel('Energia absorvida (J/s)')
ax1.set_xlabel('Tempo (horas)')

ax2.set_ylabel('Energia absorvida (J/s)')
ax2.set_xlabel('Tempo (horas)')

ax3.set_ylabel('Energia absorvida (J/s)')
ax3.set_xlabel('Tempo (horas)')

f1.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f2.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f3.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))

f1.axes[0].xaxis.set_major_formatter(xformatter)
f2.axes[0].xaxis.set_major_formatter(xformatter)
f3.axes[0].xaxis.set_major_formatter(xformatter)

f1.savefig('f1.png', bbox_inches = 'tight', dpi=128)
f2.savefig('f2.png', bbox_inches = 'tight', dpi=128)
f3.savefig('f3.png', bbox_inches = 'tight', dpi=128)

"""Aqui, serão plotados os gráficos:

> `f4` : $Q_{in}$ INMET (dia 6) e $Q_{in}$ INMET (dia 7)  em comparação com $Q_{in}$ Elson em função do tempo

> `f5 `: $Q_{in}$ INMET (dia 6) em comparação com $Q_{in}$ Elson em função do tempo

> `f6 `: $Q_{in}$ INMET (dia 7) em comparação com $Q_{in}$ Elson em função do tempo
"""

f4, ax4 = plt.subplots()
f5, ax5 = plt.subplots()
f6, ax6 = plt.subplots()

ax4.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.e_in, color='orange', label='$E_{in}$ Elson')
ax4.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia6, color='teal', label='$E_{in}$ INMET (dia 6)')
ax4.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia7, color='darkviolet', label='$E_{in}$ INMET (dia 7)')

ax5.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia6, color='teal', label='$E_{in}$ INMET (dia 6)')
ax5.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.e_in, color='orange', label='$E_{in}$ Elson')

ax6.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia7, color='darkviolet', label='$E_{in}$ INMET (dia 7)')
ax6.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.e_in, color='orange', label='$E_{in}$ Elson')

ax4.set_ylabel('Energia incidente (J/s)')
ax4.set_xlabel('Tempo (horas)')

ax5.set_ylabel('Energia incidente (J/s)')
ax5.set_xlabel('Tempo (horas)')

ax6.set_ylabel('Energia incidente (J/s)')
ax6.set_xlabel('Tempo (horas)')

f4.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f5.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f6.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))

f4.axes[0].xaxis.set_major_formatter(xformatter)
f5.axes[0].xaxis.set_major_formatter(xformatter)
f6.axes[0].xaxis.set_major_formatter(xformatter)

f4.savefig('f4.png', bbox_inches = 'tight', dpi=128)
f5.savefig('f5.png', bbox_inches = 'tight', dpi=128)
f6.savefig('f6.png', bbox_inches = 'tight', dpi=128)

"""Aqui, serão plotados os gráficos:

> `f7 `: $Q_{abs}$ INMET (dia 6) em comparação com $Q_{in}$ INMET (dia 6) em função do tempo E $Q_{abs}$ INMET (dia 7) em comparação com $Q_{in}$ INMET (dia 7) em função do tempo

> `f8 `:  $Q_{abs}$ ELSON em comparação com $Q_{in}$ ELSON
"""

f7, ax7 = plt.subplots(nrows=1, ncols=2, figsize=(5, 3))
f8, ax8 = plt.subplots()

ax7[0].plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia6/constante, color='teal', label='$E_{in}$ INMET (dia 6)')
ax7[0].plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia6, color='darkred', label='$E_{abs}$ INMET (dia 6)')

ax7[1].plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia7/constante, color='darkviolet', label='$E_{in}$ INMET (dia 7)')
ax7[1].plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia7, color='olivedrab', label='$E_{abs}$ INMET (dia 7)')

ax8.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.e_in, color='orange', label='$E_{in}$ Elson')
ax8.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_elson, color='green', label='$E_{abs}$ Elson')

ax7[0].set_ylabel('Energias (J/s)')
ax7[0].set_xlabel('Tempo (horas)')
ax7[1].set_xlabel('Tempo (horas)')

ax8.set_ylabel('Energias (J/s)')
ax8.set_xlabel('Tempo (horas)')

f7.legend(loc='center left', bbox_to_anchor=(1.05, 0.5))
f8.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))

f7.axes[0].xaxis.set_major_formatter(xformatter2)
f7.axes[1].xaxis.set_major_formatter(xformatter2)
f8.axes[0].xaxis.set_major_formatter(xformatter)
f7.tight_layout()

f7.savefig('f7.png', bbox_inches = 'tight', dpi=128)
f8.savefig('f8.png', bbox_inches = 'tight', dpi=128)

f20, ax20 = plt.subplots(nrows=1, ncols=2, figsize=(5, 3))
ax20[0].plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia6, color='teal', label='$E_{in}$ INMET (dia 6)')
ax20[0].plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia6, color='darkred', label='$E_{abs}$ INMET (dia 6)')

ax20[1].plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_in_dia7, color='darkviolet', label='$E_{in}$ INMET (dia 7)')
ax20[1].plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), Q_abs_dia7, color='olivedrab', label='$E_{abs}$ INMET (dia 7)')

ax20[0].set_ylabel('Energias (J/s)')
ax20[0].set_xlabel('Tempo (horas)')
ax20[1].set_xlabel('Tempo (horas)')
f20.legend(loc='center left', bbox_to_anchor=(1.05, 0.5))
f20.axes[0].xaxis.set_major_formatter(xformatter2)
f20.axes[1].xaxis.set_major_formatter(xformatter2)

f20.tight_layout()
f20.savefig('f20.png', bbox_inches = 'tight', dpi=128)

"""Aqui, serão plotados os gráficos:

> `f9 `: $T_f$ INMET (dia 6) em comparação com $T_{bs}$ INMET (dia 6) em função do tempo

> `f10 `: $T_q$ INMET (dia 6) em comparação com $T_{bs}$ INMET (dia 6) em função do tempo

> `f11 `: $T_q$ INMET (dia 6) em comparação com $T_{bs}$ INMET (dia 7) em função do tempo

> `f12 `: $T_q$ INMET (dia 6) em comparação com $T_{bs}$ INMET (dia 7) em função do tempo
"""

f9, ax9 = plt.subplots()
f10, ax10 = plt.subplots()
f11, ax11 = plt.subplots()
f12, ax12 = plt.subplots()

ax9.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia6.tf_e, color='blue', label='$T_f$ estimada INMET (dia 6)')
ax9.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia6.tbs, color='green', label='$T_{amb}$ INMET (dia 6)')

ax10.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia6.tq_e, color='red', label='$T_q$ estimada INMET (dia 6)')
ax10.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia6.tbs, color='green', label='$T_{amb}$ INMET (dia 6)')

ax11.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia7.tf_e, color='blue', label='$T_f$ estimada INMET (dia 7)')
ax11.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia7.tbs, color='green', label='$T_{amb}$ INMET (dia 7)')

ax12.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia7.tq_e, color='red', label='$T_q$ estimada INMET (dia 7)')
ax12.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia7.tbs, color='green', label='$T_{amb}$ INMET (dia 7)')

ax9.set_ylabel('Temperaturas ($^\circ C$)')
ax9.set_xlabel('Tempo (horas)')

ax10.set_ylabel('Temperaturas ($^\circ C$)')
ax10.set_xlabel('Tempo (horas)')

ax11.set_ylabel('Temperaturas ($^\circ C$)')
ax11.set_xlabel('Tempo (horas)')

ax12.set_ylabel('Temperaturas ($^\circ C$)')
ax12.set_xlabel('Tempo (horas)')

f9.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f10.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f11.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f12.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))

f9.axes[0].xaxis.set_major_formatter(xformatter)
f10.axes[0].xaxis.set_major_formatter(xformatter)
f11.axes[0].xaxis.set_major_formatter(xformatter)
f12.axes[0].xaxis.set_major_formatter(xformatter)

f9.savefig('f9.png', bbox_inches = 'tight', dpi=128)
f10.savefig('f10.png', bbox_inches = 'tight', dpi=128)
f11.savefig('f11.png', bbox_inches = 'tight', dpi=128)
f12.savefig('f12.png', bbox_inches = 'tight', dpi=128)

"""Aqui, serão plotados os gráficos:

> `f13 `: $T_f$ e $T_q$ INMET (dia 6) em comparação com $T_{bs}$ INMET (dia 6) e $T_f$ e $T_{amb}$ Elson em função do tempo

> `f14 `: $T_f$ e $T_q$ INMET (dia 7) em comparação com $T_{bs}$ INMET (dia 6) e $T_f$ e $T_{amb}$ Elson em função do tempo
"""

f13, ax13 = plt.subplots()
f14, ax14 = plt.subplots()

ax13.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia6.tf_e, color='blue', label='$T_f$ estimada INMET (dia 6)')
ax13.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia6.tq_e, color='red', label='$T_q$ estimada INMET (dia 6)')
ax13.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.tamb, color='saddlebrown', label='$T_{amb}$ Elson')
ax13.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.tq, color='goldenrod', label='$T_{q}$ Elson')
ax13.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.tf, color='green', label='$T_{f}$ Elson')

ax14.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia7.tf_e, color='blue', label='$T_f$ estimada INMET (dia 7)')
ax14.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), inmet_e_dia7.tq_e, color='red', label='$T_q$ estimada INMET (dia 7)')
ax14.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.tamb, color='saddlebrown', label='$T_{amb}$ Elson')
ax14.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.tq, color='goldenrod', label='$T_{q}$ Elson')
ax14.plot(periodo_elson.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), periodo_elson.tf, color='green', label='$T_{f}$ Elson')

ax13.set_ylabel('Temperaturas ($^\circ C$)')
ax13.set_xlabel('Tempo (horas)')

ax14.set_ylabel('Temperaturas ($^\circ C$)')
ax14.set_xlabel('Tempo (horas)')

f13.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f14.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))

f13.axes[0].xaxis.set_major_formatter(xformatter)
f14.axes[0].xaxis.set_major_formatter(xformatter)

f13.savefig('f13.png', bbox_inches = 'tight', dpi=128)
f14.savefig('f14.png', bbox_inches = 'tight', dpi=128)

"""Aqui, serão plotados os gráficos:

> `f15 `: $\eta$ (dia 6) INMET em função do tempo

> `f16 `: $\eta$ (dia 7) INMET em função do tempo
"""

values_dia6 = []
values_dia7 =[]
horas = []
for i in horas_uteis:
  periodo = razoes_elson[razoes_elson.H < i]
  periodo = periodo[periodo.H >= i-1]

  periodo["efi_med_dia6"] = eta_int_dia6[eta_int_dia6.H_t == i].eta_med.item()
  values_dia6.append(periodo["efi_med_dia6"])

  periodo["efi_med_dia7"] = eta_int_dia7[eta_int_dia7.H_t == i].eta_med.item()
  values_dia7.append(periodo["efi_med_dia7"])

  horas.append(periodo.hora_str)

horas_full = pd.concat(horas)
values_dia6_full = pd.concat(values_dia6)
values_dia7_full = pd.concat(values_dia7)

data40 = {'hora_str': horas_full, 'efi_med': values_dia6_full}
eta_med_hour_dia6 = pd.DataFrame(data40)

data41 = {'hora_str': horas_full, 'efi_med': values_dia7_full}
eta_med_hour_dia7 = pd.DataFrame(data41)

eta_med_hour_dia7.head()

f15, ax15 = plt.subplots()
f16, ax16 = plt.subplots()

ax15.plot(inmet_e_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), eta_dia6*100, color='green', label='$\eta$ estimada INMET (dia 6)')
ax16.plot(inmet_e_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), eta_dia7*100, color='green', label='$\eta$ estimada INMET (dia 7)')

ax15.set_ylabel('Eficiência térmica (%)')
ax15.set_xlabel('Tempo (horas)')

ax16.set_ylabel('Eficiência térmica (%)')
ax16.set_xlabel('Tempo (horas)')

f15.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f16.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))

f15.axes[0].xaxis.set_major_formatter(xformatter)
f16.axes[0].xaxis.set_major_formatter(xformatter)

f15.savefig('f15.png', bbox_inches = 'tight', dpi=128)
f16.savefig('f16.png', bbox_inches = 'tight', dpi=128)

f17, ax17 = plt.subplots()
f18, ax18 = plt.subplots()

ax17.plot(eta_med_hour_dia6.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), eta_med_hour_dia6.efi_med*100, color='green', label='$\eta$ estimada INMET (dia 6)')
ax18.plot(eta_med_hour_dia7.hora_str.apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S')), eta_med_hour_dia7.efi_med*100, color='green', label='$\eta$ estimada INMET (dia 7)')

ax17.set_ylabel('Eficiência térmica (%)')
ax17.set_xlabel('Tempo (horas)')

ax18.set_ylabel('Eficiência térmica (%)')
ax18.set_xlabel('Tempo (horas)')

f17.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))
f18.legend(loc='center left', bbox_to_anchor=(0.9, 0.5))

f17.axes[0].xaxis.set_major_formatter(xformatter)
f18.axes[0].xaxis.set_major_formatter(xformatter)

f17.savefig('f17.png', bbox_inches = 'tight', dpi=128)
f18.savefig('f18.png', bbox_inches = 'tight', dpi=128)

matriz_dia6 = eta_int_dia6.eta_med.to_numpy()*100
efi_med_dia6 = np.sum(matriz_dia6)/len(matriz_dia6)

matriz_dia7 = eta_int_dia7.eta_med.to_numpy()*100
efi_med_dia7 = np.sum(matriz_dia7)/len(matriz_dia7)

print("Eficiência média do dia 6/11/2020: {}".format(efi_med_dia6))
print("Eficiência média do dia 7/11/2020: {}".format(efi_med_dia7))